# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECR

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'デプロイ対象環境'
        type: environment
        required: true
      lambda-name:
        description: 'Lambda'
        required: true
        type: choice
        options:
          - get-managers-lambda
          - get-store-managers-lambda
          - put-store-managers-lambda
          - delete-store-managers-lambda

jobs:
  deploy:
    name: Deploy
    strategy:
      matrix:
        os: [ubuntu-latest]
        go: ["1.24"]
    permissions:
      id-token: write
      contents: read
    runs-on: ${{ matrix.os }}
    environment: ${{ github.event.inputs.env }}
    env:
      AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
      AWS_REGION: ap-northeast-1
      ECR_REPOSITORY: ludens-mdm-${{ github.event.inputs.lambda-name }}-function           # set this to your Amazon ECR repository name

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: show region
      run: |
        echo ${{ vars.AWS_REGION }}

    - name: show ECR_REPO_NAME
      run: |
        echo ${{ vars.ECR_REPO_NAME }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get image tag (type=sha tag generated by docker/metadata-action@v5)
      run: echo "IMAGE_TAG=sha-`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        LAMBDA_FUNCTION_NAME: ludens-mdm-${{ github.event.inputs.lambda-name }}
        LAMBDA_BUILD_FOLDER_NAME: ${{ github.event.inputs.lambda-name }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        echo $ECR_REPOSITORY
        docker build --build-arg="BUILD_DIR=${LAMBDA_BUILD_FOLDER_NAME}" --build-arg="HANDLER=main.go" -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $REGISTRY/$ECR_REPOSITORY:latest
        docker push $REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
